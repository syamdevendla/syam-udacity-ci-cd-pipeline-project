# Workflow name
name: Backend Continuous Deployment

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
  
  # Automatic trigger on push events to the main branch
  #push:
    #branches:
      #- master


# Jobs defined in the workflow
jobs:
  test_job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install the dependencies.
      - run: cd starter/backend && pip install pipenv
      - run: cd starter/backend && pip install pytest
      - run: cd starter/backend && pipenv install 
    
      - name: Run test only for main branch
        if: github.ref == 'refs/heads/master'
        # Run the test.
        run: cd starter/backend && pipenv run test

  lint_job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install the dependencies.
      - run: cd starter/backend && pip install pipenv
      - run: cd starter/backend && pip install pytest
      - run: cd starter/backend && pip install flake8
      - run: cd starter/backend && pipenv install 
      
    
      - name: Run lint only for main branch
        if: github.ref == 'refs/heads/master'
        # Run the linter.
        run: cd starter/backend && pipenv run lint
      
  build_job:
    needs: [test_job, lint_job]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install the dependencies.
      - run: cd starter/backend && pip install pipenv
      - run: cd starter/backend && pip install pytest
      - run: cd starter/backend && pipenv install 
    
      - name: Run lint only for main branch
        if: github.ref == 'refs/heads/master'
        # Run the test.
        run: cd starter/backend && pipenv run test

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # Use your stored AWS Access Key ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }} # Use your stored AWS Secret Access Key
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{ secrets.AWS_REGION }} # Use the region from your environment variables

      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      - name: Confirm git commit SHA output
        run: echo ${{ env.COMMIT_SHORT_SHA }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: backend_cd
          IMAGE_TAG: ${{ env.COMMIT_SHORT_SHA }}
        run: |
          cd starter/backend && docker build  -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          cd starter/backend && docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          cd k8s && kustomize edit set image backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -